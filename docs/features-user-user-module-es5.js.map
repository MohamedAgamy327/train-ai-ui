{"version":3,"sources":["webpack:///src/app/components/home/features/user/user-edit-dialog/user-edit-dialog.component.ts","webpack:///src/app/components/home/features/user/user-edit-dialog/user-edit-dialog.component.html","webpack:///src/app/components/home/features/user/user-routing.module.ts","webpack:///src/app/components/home/features/user/user.module.ts","webpack:///src/app/components/home/features/user/user-change-password-dialog/user-change-password-dialog.component.ts","webpack:///src/app/components/home/features/user/user-change-password-dialog/user-change-password-dialog.component.html","webpack:///src/app/components/home/features/user/index.ts","webpack:///src/app/components/home/features/user/user-add-dialog/user-add-dialog.component.ts","webpack:///src/app/components/home/features/user/user-add-dialog/user-add-dialog.component.html","webpack:///src/app/components/home/features/user/users/users.component.ts","webpack:///src/app/components/home/features/user/users/users.component.html"],"names":["UserEditDialogComponent","coreService","formBuilder","dialogRef","data","userService","toastrService","errorHandling","control","error","editForm","controls","hasError","createForm","group","id","name","required","role","edit","value","subscribe","res","success","close","update","routes","path","component","UserRoutingModule","forChild","UserModule","UserChangePasswordDialogComponent","credentialService","changePasswordForm","Number","password","minLength","confirmPassword","validator","changePassword","getUser","localStorage","setItem","token","change","UserAddDialogComponent","addForm","create","save","UsersComponent","pageTitleService","dialog","titleService","translate","displayedColumns","dataSource","setTitle","instant","getUsers","getAll","users","refreshData","paginator","sort","filterValue","filter","trim","toLowerCase","applyFilter","open","afterClosed","result","unshift","user","index","findIndex","f","type","splice","showAdd"],"mappings":"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","file":"features-user-user-module-es5.js","sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { CoreService, UserService } from 'src/app/core/services';\r\n\r\n@Component({\r\n  selector: 'app-user-edit-dialog',\r\n  templateUrl: './user-edit-dialog.component.html',\r\n  styleUrls: ['./user-edit-dialog.component.css']\r\n})\r\n\r\nexport class UserEditDialogComponent {\r\n\r\n  editForm: FormGroup;\r\n\r\n  constructor(\r\n    public coreService: CoreService,\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<UserEditDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private userService: UserService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.editForm = this.formBuilder.group({\r\n      id: [this.data.id],\r\n      name: [this.data.name, Validators.required],\r\n      role: [this.data.role, Validators.required]\r\n    });\r\n  }\r\n\r\n  public errorHandling = (control: string, error: string) => {\r\n    return this.editForm.controls[control].hasError(error);\r\n  }\r\n\r\n  update() {\r\n    this.userService.edit(this.data.id, this.editForm.value).subscribe(\r\n      (res: any) => {\r\n        this.toastrService.success('Edited Successfully', 'Edit');\r\n        this.dialogRef.close(res);\r\n      });\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"editForm\" class=\"popup-card-width\" autocomplete=\"off\" [dir]=\"coreService.layout\">\r\n\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n    <h2 mat-dialog-title>{{'Edit User' | translate}}</h2>\r\n    <mat-icon class=\"clickable\" (click)=\"dialogRef.close()\" matPrefix>close</mat-icon>\r\n  </div>\r\n\r\n  <mat-dialog-content>\r\n    <div>\r\n      <div>\r\n        <mat-form-field class=\"mrgn-b-xs full-wid\" appearance=\"outline\">\r\n          <mat-label>{{'Name' | translate}}</mat-label>\r\n          <input matInput formControlName=\"name\" type=\"text\" placeholder=\"{{'Name' | translate}}\">\r\n          <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n          <mat-error *ngIf=\"errorHandling('name', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <div class=\"mrgn-b-xs full-wid\">\r\n          <label class=\"mrgn-r-xs\">{{'Role' | translate}}</label>\r\n          <mat-radio-group formControlName=\"role\">\r\n            <mat-radio-button class=\"mrgn-r-xs\" value=\"Admin\">{{'Admin' | translate}}</mat-radio-button>\r\n            <mat-radio-button value=\"Cashier\">{{'Cashier' | translate}}</mat-radio-button>\r\n          </mat-radio-group>\r\n          <mat-error *ngIf=\"errorHandling('role', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions class=\"mrgn-b-xs pad-b-none\" align=\"right\">\r\n    <button type=\"button\" mat-raised-button (click)=\"dialogRef.close()\"\r\n      color=\"warn\">{{'Close' | translate | uppercase}}</button>\r\n    <button (click)=\"update()\" type=\"submit\" [disabled]=\"!editForm.valid\" mat-raised-button\r\n      color=\"primary\">{{'Update' | translate | uppercase}}</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {\r\n  UsersComponent\r\n} from '.';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: UsersComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserRoutingModule { }\r\n","import {\r\n  UserAddDialogComponent, UserChangePasswordDialogComponent,\r\n  UserEditDialogComponent,\r\n  UsersComponent\r\n} from '.';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserRoutingModule } from './user-routing.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserAddDialogComponent,\r\n    UserChangePasswordDialogComponent,\r\n    UserEditDialogComponent,\r\n    UsersComponent\r\n  ],\r\n  entryComponents: [\r\n    UserAddDialogComponent,\r\n    UserChangePasswordDialogComponent,\r\n    UserEditDialogComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoutingModule,\r\n    SharedModule,\r\n    TranslateModule\r\n  ],\r\n  providers: [\r\n  ]\r\n})\r\n\r\nexport class UserModule { }\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CoreService, CredentialService, UserService } from 'src/app/core/services';\r\nimport { MustMatch } from 'src/app/core/helpers/must-match.validator';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConstEnum } from 'src/app/core/enums';\r\n\r\n@Component({\r\n  selector: 'app-user-change-password-dialog',\r\n  templateUrl: './user-change-password-dialog.component.html',\r\n  styleUrls: ['./user-change-password-dialog.component.css']\r\n})\r\n\r\nexport class UserChangePasswordDialogComponent {\r\n\r\n  changePasswordForm: FormGroup;\r\n\r\n  constructor(\r\n    public coreService: CoreService,\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<UserChangePasswordDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private userService: UserService,\r\n    public credentialService: CredentialService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.changePasswordForm = this.formBuilder.group({\r\n      id: [Number(this.data)],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      confirmPassword: ['', [Validators.required]]\r\n    },\r\n      {\r\n        validator: MustMatch('password', 'confirmPassword')\r\n      });\r\n  }\r\n\r\n  public errorHandling = (control: string, error: string) => {\r\n    return this.changePasswordForm.controls[control].hasError(error);\r\n  }\r\n\r\n  change() {\r\n    this.userService.changePassword(this.data, this.changePasswordForm.value).subscribe(\r\n      (res: any) => {\r\n\r\n        if (this.data === this.credentialService.getUser().id) {\r\n          localStorage.setItem(ConstEnum.token, res.token);\r\n        }\r\n\r\n        this.toastrService.success('Changed Successfully', 'Change Password');\r\n        this.dialogRef.close(res);\r\n      });\r\n  }\r\n\r\n}\r\n","<form autocomplete=\"off\" class=\"popup-card-width\" [formGroup]=\"changePasswordForm\" [dir]=\"coreService.layout\">\r\n\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n    <h2 mat-dialog-title>{{'Change Password' | translate}}</h2>\r\n    <mat-icon class=\"clickable\" *ngIf=\"credentialService.getUser().isRandomPassword=='False'\"\r\n      (click)=\"dialogRef.close()\" matPrefix>close</mat-icon>\r\n  </div>\r\n\r\n  <mat-dialog-content>\r\n    <div>\r\n      <div>\r\n\r\n        <mat-form-field class=\"mrgn-b-xs full-wid\" appearance=\"outline\">\r\n          <mat-label>{{'Password' | translate}}</mat-label>\r\n          <input matInput type=\"password\" placeholder=\"{{'Password' | translate}}\" formControlName=\"password\">\r\n          <mat-icon matSuffix>security</mat-icon>\r\n          <mat-error *ngIf=\"errorHandling('password', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n          <mat-error *ngIf=\"errorHandling('password', 'minlength')\">\r\n            {{'Enter 6 characters at least' | translate}}\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"mrgn-b-xs full-wid\" appearance=\"outline\">\r\n          <mat-label>{{'Confirm Password' | translate}}</mat-label>\r\n          <input matInput type=\"password\" placeholder=\"{{'Confirm Password' | translate}}\"\r\n            formControlName=\"confirmPassword\">\r\n          <mat-icon matSuffix>security</mat-icon>\r\n          <mat-error *ngIf=\"errorHandling('confirmPassword', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n          <mat-error *ngIf=\"errorHandling('confirmPassword', 'mustMatch')\">\r\n            {{'Passwords must match' | translate}}\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n      </div>\r\n    </div>\r\n  </mat-dialog-content>\r\n\r\n  <mat-dialog-actions class=\"mrgn-b-xs pad-b-none\" align=\"right\">\r\n    <button type=\"button\" mat-raised-button (click)=\"dialogRef.close()\"\r\n      *ngIf=\"credentialService.getUser().isRandomPassword=='False'\"\r\n      color=\"warn\">{{'Close' | translate | uppercase}}</button>\r\n    <button type=\"submit\" (click)=\"change()\" [disabled]=\"!changePasswordForm.valid\" mat-raised-button\r\n      color=\"primary\">{{'Change' | translate}}</button>\r\n  </mat-dialog-actions>\r\n\r\n</form>\r\n","export * from './users/users.component';\r\nexport * from './user-add-dialog/user-add-dialog.component';\r\nexport * from './user-edit-dialog/user-edit-dialog.component';\r\nexport * from './user-change-password-dialog/user-change-password-dialog.component';\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { CoreService, UserService } from 'src/app/core/services';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-user-add-dialog',\r\n  templateUrl: './user-add-dialog.component.html',\r\n  styleUrls: ['./user-add-dialog.component.css']\r\n})\r\n\r\nexport class UserAddDialogComponent {\r\n\r\n  addForm: FormGroup;\r\n\r\n  constructor(\r\n    public coreService: CoreService,\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<UserAddDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private userService: UserService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.addForm = this.formBuilder.group({\r\n      name: ['', Validators.required],\r\n      role: ['Cashier', Validators.required]\r\n    });\r\n  }\r\n\r\n  public errorHandling = (control: string, error: string) => {\r\n    return this.addForm.controls[control].hasError(error);\r\n  }\r\n\r\n  save() {\r\n    this.userService.create(this.addForm.value).subscribe(\r\n      (res: any) => {\r\n        this.toastrService.success('Added Successfully', 'Add');\r\n        this.dialogRef.close(res);\r\n      });\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"addForm\" class=\"popup-card-width\" autocomplete=\"off\" [dir]=\"coreService.layout\">\r\n\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n    <h2 mat-dialog-title>{{'Add New User' | translate}}</h2>\r\n    <mat-icon class=\"clickable\" (click)=\"dialogRef.close()\" matPrefix>close</mat-icon>\r\n  </div>\r\n\r\n  <mat-dialog-content>\r\n    <div>\r\n      <div>\r\n        <mat-form-field class=\"mrgn-b-xs full-wid\" appearance=\"outline\">\r\n          <mat-label>{{'Name' | translate}}</mat-label>\r\n          <input matInput formControlName=\"name\" type=\"text\" placeholder=\"{{'Name' | translate}}\">\r\n          <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\r\n          <mat-error *ngIf=\"errorHandling('name', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <div class=\"mrgn-b-xs full-wid\">\r\n          <label class=\"mrgn-r-xs\">{{'Role' | translate}}</label>\r\n          <mat-radio-group formControlName=\"role\">\r\n            <mat-radio-button class=\"mrgn-r-xs\" value=\"Admin\">{{'Admin' | translate}}</mat-radio-button>\r\n            <mat-radio-button value=\"Cashier\">{{'Cashier' | translate}}</mat-radio-button>\r\n          </mat-radio-group>\r\n          <mat-error *ngIf=\"errorHandling('role', 'required')\">\r\n            {{'This field is required' | translate}}\r\n          </mat-error>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions class=\"mrgn-b-xs pad-b-none\">\r\n    <button type=\"button\" mat-raised-button (click)=\"dialogRef.close()\"\r\n      color=\"warn\">{{'Close' | translate | uppercase}}</button>\r\n    <button (click)=\"save()\" type=\"submit\" [disabled]=\"!addForm.valid\" mat-raised-button\r\n      color=\"primary\">{{'Save' | translate | uppercase}}</button>\r\n  </mat-dialog-actions>\r\n</form>\r\n","import { PageTitleService, UserService } from 'src/app/core/services';\r\nimport { User } from 'src/app/core/models';\r\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { DeleteDialogComponent } from 'src/app/components/home';\r\nimport { UserAddDialogComponent } from '../user-add-dialog/user-add-dialog.component';\r\nimport { UserEditDialogComponent } from '../user-edit-dialog/user-edit-dialog.component';\r\nimport { UserChangePasswordDialogComponent } from '../user-change-password-dialog/user-change-password-dialog.component';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class UsersComponent implements OnInit {\r\n\r\n  filter: string;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  displayedColumns: string[] = ['name', 'role', 'actions'];\r\n  users: User[];\r\n  dataSource = new MatTableDataSource<User>();\r\n\r\n  constructor(\r\n    private toastrService: ToastrService,\r\n    private pageTitleService: PageTitleService,\r\n    private userService: UserService,\r\n    private dialog: MatDialog,\r\n    private titleService: Title,\r\n    private translate: TranslateService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pageTitleService.setTitle('Users');\r\n    this.titleService.setTitle(this.translate.instant('Users'));\r\n    this.getUsers();\r\n  }\r\n\r\n  getUsers() {\r\n    this.userService.getAll().subscribe(\r\n      (res: any) => {\r\n        this.users = res;\r\n        this.refreshData();\r\n      });\r\n  }\r\n\r\n  refreshData() {\r\n    this.dataSource = new MatTableDataSource(this.users);\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  clearFilter() {\r\n    this.filter = '';\r\n    this.applyFilter(this.filter);\r\n  }\r\n\r\n  showAdd() {\r\n    const dialogRef = this.dialog.open(UserAddDialogComponent, {\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.users.unshift(result);\r\n        this.refreshData();\r\n      }\r\n    });\r\n  }\r\n\r\n  showEdit(user: User) {\r\n    const dialogRef = this.dialog.open(UserEditDialogComponent, {\r\n      data: user\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        const index = this.users.findIndex(f => f.id === result.id);\r\n        this.users[index] = result;\r\n        this.refreshData();\r\n      }\r\n    });\r\n  }\r\n\r\n  showChangePassword(id: number) {\r\n    const dialogRef = this.dialog.open(UserChangePasswordDialogComponent, {\r\n      data: id\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        const index = this.users.findIndex(f => f.id === result.id);\r\n        this.users[index] = result;\r\n        this.refreshData();\r\n      }\r\n    });\r\n  }\r\n\r\n  showDelete(user: User) {\r\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\r\n      data: { type: 'user' }\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.delete(user.id);\r\n      }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    this.userService.delete(id).subscribe(\r\n      (res: any) => {\r\n        this.toastrService.success('Deleted Successfully', 'Delete');\r\n        const index = this.users.findIndex(f => f.id === res.id);\r\n        this.users.splice(index, 1);\r\n        this.refreshData();\r\n      });\r\n  }\r\n\r\n}\r\n","<div class=\"table-manage-list\">\r\n\r\n  <mat-card>\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxLayoutGap=\"3rem\">\r\n        <h4>{{'Users List' | translate}}</h4>\r\n\r\n        <mat-form-field class=\"filter-input\" appearance=\"outline\">\r\n          <mat-label>{{'Search' | translate}}</mat-label>\r\n          <input matInput type=\"text\" [(ngModel)]=\"filter\" autocomplete=\"off\" (keyup)=\"applyFilter($event.target.value)\"\r\n            placeholder=\"{{'Search' | translate}}\">\r\n          <mat-icon matSuffix *ngIf=\"!filter\">search</mat-icon>\r\n          <mat-icon class=\"clickable\" matSuffix *ngIf=\"filter\" (click)=\"clearFilter()\">close</mat-icon>\r\n        </mat-form-field>\r\n\r\n      </div>\r\n      <div class=\"mrgn-l-md mrgn-b-md \" fxLayoutAlign=\"start center\">\r\n        <mat-card-actions class=\"mat-pad-none margin-none\">\r\n          <button class=\"mrgn-r-sm mrgn-x-sm\" mat-raised-button mat-button-sm mat-fab color=\"primary\"\r\n            (click)=\"showAdd()\">\r\n            <mat-icon>add</mat-icon>\r\n          </button>\r\n          <button mat-raised-button mat-button-sm mat-fab color=\"primary\" (click)=\"getUsers()\">\r\n            <mat-icon>refresh</mat-icon>\r\n          </button>\r\n        </mat-card-actions>\r\n      </div>\r\n    </div>\r\n\r\n    <mat-divider></mat-divider>\r\n    <div class=\"table-responsive\">\r\n      <table class=\"table table-hover table-middle th-fw-light mb-0\" mat-table [dataSource]=\"dataSource\">\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef> {{'Name' | translate}} </th>\r\n          <td mat-cell *matCellDef=\"let element\">\r\n            <div class=\"make-ellipse clickable\" (click)=\"showEdit(element)\">{{element.name}} </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"role\">\r\n          <th mat-header-cell *matHeaderCellDef>{{'Role' | translate}}</th>\r\n          <td mat-cell *matCellDef=\"let element\">\r\n            <div class=\"make-ellipse clickable\" (click)=\"showEdit(element)\">{{element.role | translate}} </div>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"actions\" class=\"actions-padding\">\r\n          <th mat-header-cell *matHeaderCellDef class=\"actions-padding\">{{'Actions' | translate}}</th>\r\n          <td mat-cell *matCellDef=\"let element\">\r\n            <button mat-icon-button>\r\n              <mat-icon matTooltip=\"{{'Edit' | translate}}\" aria-label=\"Edit\" class=\"mat-icon-grey .table-icon\"\r\n                (click)=\"showEdit(element)\">\r\n                edit</mat-icon>\r\n            </button>\r\n            <button mat-icon-button (click)=\"showDelete(element)\">\r\n              <mat-icon matTooltip=\"{{'Delete' | translate}}\" aria-label=\"Delete\" class=\"mat-icon-grey .table-icon\">\r\n                delete\r\n              </mat-icon>\r\n            </button>\r\n            <button mat-icon-button (click)=\"showChangePassword(element.id)\">\r\n              <mat-icon matTooltip=\"{{'Change Password' | translate}}\" aria-label=\"Change Password\"\r\n                class=\"mat-icon-grey .table-icon\">\r\n                security</mat-icon>\r\n            </button>\r\n          </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      </table>\r\n    </div>\r\n    <div class=\"pagination\">\r\n      <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[10, 20, 50, 100]\" showFirstLastButtons>\r\n      </mat-paginator>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n"]}